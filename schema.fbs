namespace TensorBuffers;

// Enum to specify different data types for tensors
enum DataType: byte {
  None,       // Placeholder
  Float32,    // 32-bit floating point
  Float64,    // 64-bit floating point
  Int8,       // 8-bit signed integer
  Int16,      // 16-bit signed integer
  Int32,      // 32-bit signed integer
  Int64,      // 64-bit signed integer
  UInt8,      // 8-bit unsigned integer
  UInt16,     // 16-bit unsigned integer
  UInt32,     // 32-bit unsigned integer
  UInt64,     // 64-bit unsigned integer
}

// TensorMetadata holds all information about a tensor
table TensorMetadata {
  id: uint64 (key);       // Unique identifier for the tensor
  name: string (required); // Name of the tensor
  shape: [uint];          // Shape of the tensor (e.g., [2, 3, 4])
  data_type: DataType;    // Data type of the tensor
  data_offset: uint;      // Offset for the data in memory
  data_size: uint;        // Size of the data in bytes
}

// TensorBuffersMetadata holds metadata about the model, version, tensors, and operations
table TensorBuffersMetadata {
  version: string (required);     // Version of the schema
  model: string;                  // Model name or description
  tensors: [TensorMetadata];      // List of tensors in the model
}

// The root table that holds the metadata
root_type TensorBuffersMetadata;
namespace TensorBuffers;

// Enum to specify different data types for tensors
enum DataType : byte {
  None,       // Placeholder
  Float32,    // 32-bit floating point
  Float64,    // 64-bit floating point
  Int8,       // 8-bit signed integer
  Int16,      // 16-bit signed integer
  Int32,      // 32-bit signed integer
  Int64,      // 64-bit signed integer
  UInt8,      // 8-bit unsigned integer
  UInt16,     // 16-bit unsigned integer
  UInt32,     // 32-bit unsigned integer
  UInt64      // 64-bit unsigned integer
}

// TensorMetadata holds all information about a tensor
table TensorMetadata {
  id:          uint64 (key);    // Unique identifier for the tensor
  name:        string (required); // Name of the tensor
  shape:       [uint];          // Shape of the tensor (e.g., [2, 3, 4])
  data_type:   DataType;        // Data type of the tensor
  data_offset: uint;            // Offset for the data in memory
  data_size:   uint;            // Size of the data in bytes
}

// Enum to represent operations for machine learning
enum Operation : byte {
  None,             // Placeholder
  Add,              // Addition
  Sub,              // Subtraction
  Mul,              // Multiplication
  Div,              // Division
  Sqr,              // Square (x^2)
  Sqrt,             // Square root (√x)
  Sum,              // Sum of elements
  Mean,             // Mean of elements
  Argmax,           // Index of maximum value
  Sigmoid,          // Sigmoid function (1 / (1 + e^(-x)))
  Tanh,             // Hyperbolic tangent function (tanh(x))
  ReLU,             // Rectified Linear Unit (max(0, x))
  LeakyReLU,        // Leaky ReLU function (max(αx, x))
  Softmax,          // Softmax function (exp(xᵢ) / sum(exp(xᵢ)))
  MatMul,           // Matrix multiplication
  Concat,           // Concatenate tensors along a dimension
  Transpose,        // Transpose a matrix
  Flatten,          // Flatten a tensor into 1D
  Reshape,          // Reshape a tensor
  BatchNorm,        // Batch normalization
  Dropout,          // Dropout regularization
  MaxPool,          // Max pooling
  AvgPool,          // Average pooling
  Conv2D,           // 2D convolution
  FC,               // Fully connected layer
  Softplus,         // Softplus function (log(1 + exp(x)))
  Log,              // Natural logarithm (log(x))
  Exp,              // Exponential function (e^x)
  Abs,              // Absolute value (|x|)
  Pow,              // Power function (xʸ)
  CrossEntropyLoss, // Cross-entropy loss function
  MSELoss,          // Mean squared error loss
  L1Loss,           // L1 loss (absolute error)
  Adam,             // Adam optimization
  SGD,              // Stochastic Gradient Descent optimization
  RMSProp           // RMSProp optimization
}

// Metadata for a tensor operation
table OperationMetadata {
  id:               uint64 (key);     // Unique identifier for the operation
  operation:        Operation;        // Type of the operation
  output:           uint64;           // ID of the output tensor
  input_operations: [uint64];          // IDs of input operations (dependencies)
}

// Metadata about the full tensor buffer model
table TensorBuffersMetadata {
  version:    string (required);      // Version of the schema
  model:      string;                 // Model name or description
  tensors:    [TensorMetadata];       // List of tensors
  operations: [OperationMetadata];    // List of operations
}

// The root table
root_type TensorBuffersMetadata;

// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod tensor_buffers {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DATA_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DATA_TYPE: i8 = 10;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DATA_TYPE: [DataType; 11] = [
  DataType::None,
  DataType::Float32,
  DataType::Float64,
  DataType::Int8,
  DataType::Int16,
  DataType::Int32,
  DataType::Int64,
  DataType::UInt8,
  DataType::UInt16,
  DataType::UInt32,
  DataType::UInt64,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DataType(pub i8);
#[allow(non_upper_case_globals)]
impl DataType {
  pub const None: Self = Self(0);
  pub const Float32: Self = Self(1);
  pub const Float64: Self = Self(2);
  pub const Int8: Self = Self(3);
  pub const Int16: Self = Self(4);
  pub const Int32: Self = Self(5);
  pub const Int64: Self = Self(6);
  pub const UInt8: Self = Self(7);
  pub const UInt16: Self = Self(8);
  pub const UInt32: Self = Self(9);
  pub const UInt64: Self = Self(10);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 10;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Float32,
    Self::Float64,
    Self::Int8,
    Self::Int16,
    Self::Int32,
    Self::Int64,
    Self::UInt8,
    Self::UInt16,
    Self::UInt32,
    Self::UInt64,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Float32 => Some("Float32"),
      Self::Float64 => Some("Float64"),
      Self::Int8 => Some("Int8"),
      Self::Int16 => Some("Int16"),
      Self::Int32 => Some("Int32"),
      Self::Int64 => Some("Int64"),
      Self::UInt8 => Some("UInt8"),
      Self::UInt16 => Some("UInt16"),
      Self::UInt32 => Some("UInt32"),
      Self::UInt64 => Some("UInt64"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DataType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DataType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DataType {
    type Output = DataType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DataType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DataType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DataType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OPERATION: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OPERATION: i8 = 36;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OPERATION: [Operation; 37] = [
  Operation::None,
  Operation::Add,
  Operation::Sub,
  Operation::Mul,
  Operation::Div,
  Operation::Sqr,
  Operation::Sqrt,
  Operation::Sum,
  Operation::Mean,
  Operation::Argmax,
  Operation::Sigmoid,
  Operation::Tanh,
  Operation::ReLU,
  Operation::LeakyReLU,
  Operation::Softmax,
  Operation::MatMul,
  Operation::Concat,
  Operation::Transpose,
  Operation::Flatten,
  Operation::Reshape,
  Operation::BatchNorm,
  Operation::Dropout,
  Operation::MaxPool,
  Operation::AvgPool,
  Operation::Conv2D,
  Operation::FC,
  Operation::Softplus,
  Operation::Log,
  Operation::Exp,
  Operation::Abs,
  Operation::Pow,
  Operation::CrossEntropyLoss,
  Operation::MSELoss,
  Operation::L1Loss,
  Operation::Adam,
  Operation::SGD,
  Operation::RMSProp,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Operation(pub i8);
#[allow(non_upper_case_globals)]
impl Operation {
  pub const None: Self = Self(0);
  pub const Add: Self = Self(1);
  pub const Sub: Self = Self(2);
  pub const Mul: Self = Self(3);
  pub const Div: Self = Self(4);
  pub const Sqr: Self = Self(5);
  pub const Sqrt: Self = Self(6);
  pub const Sum: Self = Self(7);
  pub const Mean: Self = Self(8);
  pub const Argmax: Self = Self(9);
  pub const Sigmoid: Self = Self(10);
  pub const Tanh: Self = Self(11);
  pub const ReLU: Self = Self(12);
  pub const LeakyReLU: Self = Self(13);
  pub const Softmax: Self = Self(14);
  pub const MatMul: Self = Self(15);
  pub const Concat: Self = Self(16);
  pub const Transpose: Self = Self(17);
  pub const Flatten: Self = Self(18);
  pub const Reshape: Self = Self(19);
  pub const BatchNorm: Self = Self(20);
  pub const Dropout: Self = Self(21);
  pub const MaxPool: Self = Self(22);
  pub const AvgPool: Self = Self(23);
  pub const Conv2D: Self = Self(24);
  pub const FC: Self = Self(25);
  pub const Softplus: Self = Self(26);
  pub const Log: Self = Self(27);
  pub const Exp: Self = Self(28);
  pub const Abs: Self = Self(29);
  pub const Pow: Self = Self(30);
  pub const CrossEntropyLoss: Self = Self(31);
  pub const MSELoss: Self = Self(32);
  pub const L1Loss: Self = Self(33);
  pub const Adam: Self = Self(34);
  pub const SGD: Self = Self(35);
  pub const RMSProp: Self = Self(36);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 36;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Add,
    Self::Sub,
    Self::Mul,
    Self::Div,
    Self::Sqr,
    Self::Sqrt,
    Self::Sum,
    Self::Mean,
    Self::Argmax,
    Self::Sigmoid,
    Self::Tanh,
    Self::ReLU,
    Self::LeakyReLU,
    Self::Softmax,
    Self::MatMul,
    Self::Concat,
    Self::Transpose,
    Self::Flatten,
    Self::Reshape,
    Self::BatchNorm,
    Self::Dropout,
    Self::MaxPool,
    Self::AvgPool,
    Self::Conv2D,
    Self::FC,
    Self::Softplus,
    Self::Log,
    Self::Exp,
    Self::Abs,
    Self::Pow,
    Self::CrossEntropyLoss,
    Self::MSELoss,
    Self::L1Loss,
    Self::Adam,
    Self::SGD,
    Self::RMSProp,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Add => Some("Add"),
      Self::Sub => Some("Sub"),
      Self::Mul => Some("Mul"),
      Self::Div => Some("Div"),
      Self::Sqr => Some("Sqr"),
      Self::Sqrt => Some("Sqrt"),
      Self::Sum => Some("Sum"),
      Self::Mean => Some("Mean"),
      Self::Argmax => Some("Argmax"),
      Self::Sigmoid => Some("Sigmoid"),
      Self::Tanh => Some("Tanh"),
      Self::ReLU => Some("ReLU"),
      Self::LeakyReLU => Some("LeakyReLU"),
      Self::Softmax => Some("Softmax"),
      Self::MatMul => Some("MatMul"),
      Self::Concat => Some("Concat"),
      Self::Transpose => Some("Transpose"),
      Self::Flatten => Some("Flatten"),
      Self::Reshape => Some("Reshape"),
      Self::BatchNorm => Some("BatchNorm"),
      Self::Dropout => Some("Dropout"),
      Self::MaxPool => Some("MaxPool"),
      Self::AvgPool => Some("AvgPool"),
      Self::Conv2D => Some("Conv2D"),
      Self::FC => Some("FC"),
      Self::Softplus => Some("Softplus"),
      Self::Log => Some("Log"),
      Self::Exp => Some("Exp"),
      Self::Abs => Some("Abs"),
      Self::Pow => Some("Pow"),
      Self::CrossEntropyLoss => Some("CrossEntropyLoss"),
      Self::MSELoss => Some("MSELoss"),
      Self::L1Loss => Some("L1Loss"),
      Self::Adam => Some("Adam"),
      Self::SGD => Some("SGD"),
      Self::RMSProp => Some("RMSProp"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Operation {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Operation {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Operation {
    type Output = Operation;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Operation {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Operation {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Operation {}
pub enum TensorMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TensorMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TensorMetadata<'a> {
  type Inner = TensorMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TensorMetadata<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_SHAPE: flatbuffers::VOffsetT = 8;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 10;
  pub const VT_DATA_OFFSET: flatbuffers::VOffsetT = 12;
  pub const VT_DATA_SIZE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TensorMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TensorMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<TensorMetadata<'bldr>> {
    let mut builder = TensorMetadataBuilder::new(_fbb);
    builder.add_id(args.id);
    builder.add_data_size(args.data_size);
    builder.add_data_offset(args.data_offset);
    if let Some(x) = args.shape { builder.add_shape(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_data_type(args.data_type);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(TensorMetadata::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &TensorMetadata) -> bool {
    self.id() < o.id()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: u64) -> ::core::cmp::Ordering {
    let key = self.id();
    key.cmp(&val)
  }
  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TensorMetadata::VT_NAME, None).unwrap()}
  }
  #[inline]
  pub fn shape(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(TensorMetadata::VT_SHAPE, None)}
  }
  #[inline]
  pub fn data_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(TensorMetadata::VT_DATA_TYPE, Some(DataType::None)).unwrap()}
  }
  #[inline]
  pub fn data_offset(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TensorMetadata::VT_DATA_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn data_size(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TensorMetadata::VT_DATA_SIZE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TensorMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("shape", Self::VT_SHAPE, false)?
     .visit_field::<DataType>("data_type", Self::VT_DATA_TYPE, false)?
     .visit_field::<u32>("data_offset", Self::VT_DATA_OFFSET, false)?
     .visit_field::<u32>("data_size", Self::VT_DATA_SIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct TensorMetadataArgs<'a> {
    pub id: u64,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub shape: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub data_type: DataType,
    pub data_offset: u32,
    pub data_size: u32,
}
impl<'a> Default for TensorMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TensorMetadataArgs {
      id: 0,
      name: None, // required field
      shape: None,
      data_type: DataType::None,
      data_offset: 0,
      data_size: 0,
    }
  }
}

pub struct TensorMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TensorMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(TensorMetadata::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorMetadata::VT_NAME, name);
  }
  #[inline]
  pub fn add_shape(&mut self, shape: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorMetadata::VT_SHAPE, shape);
  }
  #[inline]
  pub fn add_data_type(&mut self, data_type: DataType) {
    self.fbb_.push_slot::<DataType>(TensorMetadata::VT_DATA_TYPE, data_type, DataType::None);
  }
  #[inline]
  pub fn add_data_offset(&mut self, data_offset: u32) {
    self.fbb_.push_slot::<u32>(TensorMetadata::VT_DATA_OFFSET, data_offset, 0);
  }
  #[inline]
  pub fn add_data_size(&mut self, data_size: u32) {
    self.fbb_.push_slot::<u32>(TensorMetadata::VT_DATA_SIZE, data_size, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TensorMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TensorMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TensorMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, TensorMetadata::VT_NAME,"name");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TensorMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TensorMetadata");
      ds.field("id", &self.id());
      ds.field("name", &self.name());
      ds.field("shape", &self.shape());
      ds.field("data_type", &self.data_type());
      ds.field("data_offset", &self.data_offset());
      ds.field("data_size", &self.data_size());
      ds.finish()
  }
}
pub enum OperationMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct OperationMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OperationMetadata<'a> {
  type Inner = OperationMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OperationMetadata<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_OPERATION: flatbuffers::VOffsetT = 6;
  pub const VT_OUTPUT: flatbuffers::VOffsetT = 8;
  pub const VT_INPUT_OPERATIONS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OperationMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OperationMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<OperationMetadata<'bldr>> {
    let mut builder = OperationMetadataBuilder::new(_fbb);
    builder.add_output(args.output);
    builder.add_id(args.id);
    if let Some(x) = args.input_operations { builder.add_input_operations(x); }
    builder.add_operation(args.operation);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OperationMetadata::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &OperationMetadata) -> bool {
    self.id() < o.id()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: u64) -> ::core::cmp::Ordering {
    let key = self.id();
    key.cmp(&val)
  }
  #[inline]
  pub fn operation(&self) -> Operation {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Operation>(OperationMetadata::VT_OPERATION, Some(Operation::None)).unwrap()}
  }
  #[inline]
  pub fn output(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(OperationMetadata::VT_OUTPUT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn input_operations(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(OperationMetadata::VT_INPUT_OPERATIONS, None)}
  }
}

impl flatbuffers::Verifiable for OperationMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<Operation>("operation", Self::VT_OPERATION, false)?
     .visit_field::<u64>("output", Self::VT_OUTPUT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u64>>>("input_operations", Self::VT_INPUT_OPERATIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct OperationMetadataArgs<'a> {
    pub id: u64,
    pub operation: Operation,
    pub output: u64,
    pub input_operations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u64>>>,
}
impl<'a> Default for OperationMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    OperationMetadataArgs {
      id: 0,
      operation: Operation::None,
      output: 0,
      input_operations: None,
    }
  }
}

pub struct OperationMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OperationMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(OperationMetadata::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_operation(&mut self, operation: Operation) {
    self.fbb_.push_slot::<Operation>(OperationMetadata::VT_OPERATION, operation, Operation::None);
  }
  #[inline]
  pub fn add_output(&mut self, output: u64) {
    self.fbb_.push_slot::<u64>(OperationMetadata::VT_OUTPUT, output, 0);
  }
  #[inline]
  pub fn add_input_operations(&mut self, input_operations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OperationMetadata::VT_INPUT_OPERATIONS, input_operations);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OperationMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OperationMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OperationMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OperationMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OperationMetadata");
      ds.field("id", &self.id());
      ds.field("operation", &self.operation());
      ds.field("output", &self.output());
      ds.field("input_operations", &self.input_operations());
      ds.finish()
  }
}
pub enum TensorBuffersMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TensorBuffersMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TensorBuffersMetadata<'a> {
  type Inner = TensorBuffersMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TensorBuffersMetadata<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_MODEL: flatbuffers::VOffsetT = 6;
  pub const VT_TENSORS: flatbuffers::VOffsetT = 8;
  pub const VT_OPERATIONS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TensorBuffersMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TensorBuffersMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<TensorBuffersMetadata<'bldr>> {
    let mut builder = TensorBuffersMetadataBuilder::new(_fbb);
    if let Some(x) = args.operations { builder.add_operations(x); }
    if let Some(x) = args.tensors { builder.add_tensors(x); }
    if let Some(x) = args.model { builder.add_model(x); }
    if let Some(x) = args.version { builder.add_version(x); }
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TensorBuffersMetadata::VT_VERSION, None).unwrap()}
  }
  #[inline]
  pub fn model(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TensorBuffersMetadata::VT_MODEL, None)}
  }
  #[inline]
  pub fn tensors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TensorMetadata<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TensorMetadata>>>>(TensorBuffersMetadata::VT_TENSORS, None)}
  }
  #[inline]
  pub fn operations(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OperationMetadata<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OperationMetadata>>>>(TensorBuffersMetadata::VT_OPERATIONS, None)}
  }
}

impl flatbuffers::Verifiable for TensorBuffersMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("model", Self::VT_MODEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TensorMetadata>>>>("tensors", Self::VT_TENSORS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<OperationMetadata>>>>("operations", Self::VT_OPERATIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct TensorBuffersMetadataArgs<'a> {
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub model: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tensors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TensorMetadata<'a>>>>>,
    pub operations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OperationMetadata<'a>>>>>,
}
impl<'a> Default for TensorBuffersMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TensorBuffersMetadataArgs {
      version: None, // required field
      model: None,
      tensors: None,
      operations: None,
    }
  }
}

pub struct TensorBuffersMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TensorBuffersMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorBuffersMetadata::VT_VERSION, version);
  }
  #[inline]
  pub fn add_model(&mut self, model: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorBuffersMetadata::VT_MODEL, model);
  }
  #[inline]
  pub fn add_tensors(&mut self, tensors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TensorMetadata<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorBuffersMetadata::VT_TENSORS, tensors);
  }
  #[inline]
  pub fn add_operations(&mut self, operations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<OperationMetadata<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorBuffersMetadata::VT_OPERATIONS, operations);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TensorBuffersMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TensorBuffersMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TensorBuffersMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, TensorBuffersMetadata::VT_VERSION,"version");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TensorBuffersMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TensorBuffersMetadata");
      ds.field("version", &self.version());
      ds.field("model", &self.model());
      ds.field("tensors", &self.tensors());
      ds.field("operations", &self.operations());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TensorBuffersMetadata`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tensor_buffers_metadata_unchecked`.
pub fn root_as_tensor_buffers_metadata(buf: &[u8]) -> Result<TensorBuffersMetadata, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TensorBuffersMetadata>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TensorBuffersMetadata` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_tensor_buffers_metadata_unchecked`.
pub fn size_prefixed_root_as_tensor_buffers_metadata(buf: &[u8]) -> Result<TensorBuffersMetadata, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TensorBuffersMetadata>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TensorBuffersMetadata` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tensor_buffers_metadata_unchecked`.
pub fn root_as_tensor_buffers_metadata_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TensorBuffersMetadata<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TensorBuffersMetadata<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TensorBuffersMetadata` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tensor_buffers_metadata_unchecked`.
pub fn size_prefixed_root_as_tensor_buffers_metadata_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TensorBuffersMetadata<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TensorBuffersMetadata<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TensorBuffersMetadata and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TensorBuffersMetadata`.
pub unsafe fn root_as_tensor_buffers_metadata_unchecked(buf: &[u8]) -> TensorBuffersMetadata {
  flatbuffers::root_unchecked::<TensorBuffersMetadata>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TensorBuffersMetadata and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TensorBuffersMetadata`.
pub unsafe fn size_prefixed_root_as_tensor_buffers_metadata_unchecked(buf: &[u8]) -> TensorBuffersMetadata {
  flatbuffers::size_prefixed_root_unchecked::<TensorBuffersMetadata>(buf)
}
#[inline]
pub fn finish_tensor_buffers_metadata_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TensorBuffersMetadata<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_tensor_buffers_metadata_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TensorBuffersMetadata<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod TensorBuffers


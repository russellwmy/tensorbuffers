// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod tensor_buffers {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DATA_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DATA_TYPE: i8 = 10;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DATA_TYPE: [DataType; 11] = [
  DataType::NONE,
  DataType::Float32,
  DataType::Float64,
  DataType::Int8,
  DataType::Int16,
  DataType::Int32,
  DataType::Int64,
  DataType::UInt8,
  DataType::UInt16,
  DataType::UInt32,
  DataType::UInt64,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DataType(pub i8);
#[allow(non_upper_case_globals)]
impl DataType {
  pub const NONE: Self = Self(0);
  pub const Float32: Self = Self(1);
  pub const Float64: Self = Self(2);
  pub const Int8: Self = Self(3);
  pub const Int16: Self = Self(4);
  pub const Int32: Self = Self(5);
  pub const Int64: Self = Self(6);
  pub const UInt8: Self = Self(7);
  pub const UInt16: Self = Self(8);
  pub const UInt32: Self = Self(9);
  pub const UInt64: Self = Self(10);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 10;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::Float32,
    Self::Float64,
    Self::Int8,
    Self::Int16,
    Self::Int32,
    Self::Int64,
    Self::UInt8,
    Self::UInt16,
    Self::UInt32,
    Self::UInt64,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::Float32 => Some("Float32"),
      Self::Float64 => Some("Float64"),
      Self::Int8 => Some("Int8"),
      Self::Int16 => Some("Int16"),
      Self::Int32 => Some("Int32"),
      Self::Int64 => Some("Int64"),
      Self::UInt8 => Some("UInt8"),
      Self::UInt16 => Some("UInt16"),
      Self::UInt32 => Some("UInt32"),
      Self::UInt64 => Some("UInt64"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DataType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DataType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DataType {
    type Output = DataType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DataType {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DataType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DataType {}
pub enum TensorMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TensorMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TensorMetadata<'a> {
  type Inner = TensorMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TensorMetadata<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SHAPE: flatbuffers::VOffsetT = 6;
  pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 8;
  pub const VT_DATA_OFFSET: flatbuffers::VOffsetT = 10;
  pub const VT_DATA_SIZE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TensorMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TensorMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<TensorMetadata<'bldr>> {
    let mut builder = TensorMetadataBuilder::new(_fbb);
    builder.add_data_size(args.data_size);
    builder.add_data_offset(args.data_offset);
    if let Some(x) = args.shape { builder.add_shape(x); }
    builder.add_id(args.id);
    builder.add_data_type(args.data_type);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TensorMetadata::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn shape(&self) -> Option<flatbuffers::Vector<'a, u32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(TensorMetadata::VT_SHAPE, None)}
  }
  #[inline]
  pub fn data_type(&self) -> DataType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DataType>(TensorMetadata::VT_DATA_TYPE, Some(DataType::NONE)).unwrap()}
  }
  #[inline]
  pub fn data_offset(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TensorMetadata::VT_DATA_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn data_size(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(TensorMetadata::VT_DATA_SIZE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TensorMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>("shape", Self::VT_SHAPE, false)?
     .visit_field::<DataType>("data_type", Self::VT_DATA_TYPE, false)?
     .visit_field::<u32>("data_offset", Self::VT_DATA_OFFSET, false)?
     .visit_field::<u32>("data_size", Self::VT_DATA_SIZE, false)?
     .finish();
    Ok(())
  }
}
pub struct TensorMetadataArgs<'a> {
    pub id: u32,
    pub shape: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    pub data_type: DataType,
    pub data_offset: u32,
    pub data_size: u32,
}
impl<'a> Default for TensorMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TensorMetadataArgs {
      id: 0,
      shape: None,
      data_type: DataType::NONE,
      data_offset: 0,
      data_size: 0,
    }
  }
}

pub struct TensorMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TensorMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(TensorMetadata::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_shape(&mut self, shape: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorMetadata::VT_SHAPE, shape);
  }
  #[inline]
  pub fn add_data_type(&mut self, data_type: DataType) {
    self.fbb_.push_slot::<DataType>(TensorMetadata::VT_DATA_TYPE, data_type, DataType::NONE);
  }
  #[inline]
  pub fn add_data_offset(&mut self, data_offset: u32) {
    self.fbb_.push_slot::<u32>(TensorMetadata::VT_DATA_OFFSET, data_offset, 0);
  }
  #[inline]
  pub fn add_data_size(&mut self, data_size: u32) {
    self.fbb_.push_slot::<u32>(TensorMetadata::VT_DATA_SIZE, data_size, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TensorMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TensorMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TensorMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TensorMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TensorMetadata");
      ds.field("id", &self.id());
      ds.field("shape", &self.shape());
      ds.field("data_type", &self.data_type());
      ds.field("data_offset", &self.data_offset());
      ds.field("data_size", &self.data_size());
      ds.finish()
  }
}
pub enum TensorBuffersMetadataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TensorBuffersMetadata<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TensorBuffersMetadata<'a> {
  type Inner = TensorBuffersMetadata<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TensorBuffersMetadata<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_TENSORS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TensorBuffersMetadata { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TensorBuffersMetadataArgs<'args>
  ) -> flatbuffers::WIPOffset<TensorBuffersMetadata<'bldr>> {
    let mut builder = TensorBuffersMetadataBuilder::new(_fbb);
    if let Some(x) = args.tensors { builder.add_tensors(x); }
    if let Some(x) = args.version { builder.add_version(x); }
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TensorBuffersMetadata::VT_VERSION, None).unwrap()}
  }
  #[inline]
  pub fn tensors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TensorMetadata<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TensorMetadata>>>>(TensorBuffersMetadata::VT_TENSORS, None)}
  }
}

impl flatbuffers::Verifiable for TensorBuffersMetadata<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TensorMetadata>>>>("tensors", Self::VT_TENSORS, false)?
     .finish();
    Ok(())
  }
}
pub struct TensorBuffersMetadataArgs<'a> {
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tensors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TensorMetadata<'a>>>>>,
}
impl<'a> Default for TensorBuffersMetadataArgs<'a> {
  #[inline]
  fn default() -> Self {
    TensorBuffersMetadataArgs {
      version: None, // required field
      tensors: None,
    }
  }
}

pub struct TensorBuffersMetadataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TensorBuffersMetadataBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorBuffersMetadata::VT_VERSION, version);
  }
  #[inline]
  pub fn add_tensors(&mut self, tensors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TensorMetadata<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TensorBuffersMetadata::VT_TENSORS, tensors);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TensorBuffersMetadataBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TensorBuffersMetadataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TensorBuffersMetadata<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, TensorBuffersMetadata::VT_VERSION,"version");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TensorBuffersMetadata<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TensorBuffersMetadata");
      ds.field("version", &self.version());
      ds.field("tensors", &self.tensors());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TensorBuffersMetadata`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tensor_buffers_metadata_unchecked`.
pub fn root_as_tensor_buffers_metadata(buf: &[u8]) -> Result<TensorBuffersMetadata, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TensorBuffersMetadata>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TensorBuffersMetadata` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_tensor_buffers_metadata_unchecked`.
pub fn size_prefixed_root_as_tensor_buffers_metadata(buf: &[u8]) -> Result<TensorBuffersMetadata, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TensorBuffersMetadata>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TensorBuffersMetadata` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tensor_buffers_metadata_unchecked`.
pub fn root_as_tensor_buffers_metadata_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TensorBuffersMetadata<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TensorBuffersMetadata<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TensorBuffersMetadata` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_tensor_buffers_metadata_unchecked`.
pub fn size_prefixed_root_as_tensor_buffers_metadata_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TensorBuffersMetadata<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TensorBuffersMetadata<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TensorBuffersMetadata and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TensorBuffersMetadata`.
pub unsafe fn root_as_tensor_buffers_metadata_unchecked(buf: &[u8]) -> TensorBuffersMetadata {
  flatbuffers::root_unchecked::<TensorBuffersMetadata>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TensorBuffersMetadata and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TensorBuffersMetadata`.
pub unsafe fn size_prefixed_root_as_tensor_buffers_metadata_unchecked(buf: &[u8]) -> TensorBuffersMetadata {
  flatbuffers::size_prefixed_root_unchecked::<TensorBuffersMetadata>(buf)
}
#[inline]
pub fn finish_tensor_buffers_metadata_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TensorBuffersMetadata<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_tensor_buffers_metadata_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TensorBuffersMetadata<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod TensorBuffers

